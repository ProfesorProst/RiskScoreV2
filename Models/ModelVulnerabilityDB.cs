using DependencyCheck.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RiskScore.Models
{
    class ModelVulnerabilityDB
    {
        CRUDUserVulnerabilitesDB crudUserVulnerabilitesDB;
        CRUDVulnerabilityDB crudVulnerabilityDB;
        public ModelVulnerabilityDB()
        {
            crudUserVulnerabilitesDB = new CRUDUserVulnerabilitesDB();
            crudVulnerabilityDB = new CRUDVulnerabilityDB();
        }

        public void UpdateVulnerabilityDB(VulnerabilityDB vulnerability)
        {
            crudVulnerabilityDB.Update(vulnerability);
        }

        public List<VulnerabilityDB> GetAllEmptyVulnerabilities()
        {
            CRUDDepenVulnDB controllerDepenVuln = new CRUDDepenVulnDB();
            var empVul = from n in controllerDepenVuln.GetAllVulnerabilities()
                         where n.techDamage == null || n.threats == null || n.bizDamage == null
                         select n;
            return (empVul != null) ? empVul.ToList() : null;
        }
        public bool FindEmptyVuln()
        {
            return (GetAllEmptyVulnerabilities() != null) ? true : false;
        }

        internal UserVulnerabilityDB FindTask(long userId)
        {
            var emptyVuln = GetAllEmptyVulnerabilities();
            var userVulnerabilityDBsID = crudUserVulnerabilitesDB.GetObjects().Select(x => x.vulnerability_id).ToList();

            UserVulnerabilityDB newUserVulnerabilityDB = null;
            foreach (var proccedVuln in emptyVuln)//emptyVuln.Where(inv => !userVulnerabilityDBsID.Contains(inv.id)).ToList())
            {
                newUserVulnerabilityDB = crudUserVulnerabilitesDB.ReadByUserVuln(userId, proccedVuln.id);
                if (newUserVulnerabilityDB == null)
                {
                    newUserVulnerabilityDB = new UserVulnerabilityDB(Convert.ToInt32(userId), proccedVuln.id);
                    crudUserVulnerabilitesDB.Create(newUserVulnerabilityDB);
                    break;
                }
                else if (newUserVulnerabilityDB.techDamage == null || newUserVulnerabilityDB.bizDamage == null
                        || newUserVulnerabilityDB.threats == null)
                    break;
                else newUserVulnerabilityDB = null;
            }
            if (newUserVulnerabilityDB == null)
                return null;

            newUserVulnerabilityDB = crudUserVulnerabilitesDB.ReadByUserVuln(newUserVulnerabilityDB.userid, newUserVulnerabilityDB.vulnerability_id);
            return newUserVulnerabilityDB;
        }

        internal UserVulnerabilityDB UserCreateMark(int mark, string v, long vulnId, long userId)
        {
            var userVulnDB = crudUserVulnerabilitesDB.ReadByUserVuln(userId, vulnId);
            bool ifNew = false;
            if (userVulnDB == null)
            {
                ifNew = true;
                userVulnDB = new UserVulnerabilityDB(userId, vulnId);
            }

            switch (v)
            {
                case "threats":
                    if (userVulnDB.threats != null) return null;
                    userVulnDB.threats = mark;
                    break;
                case "techDamage":
                    if (userVulnDB.techDamage != null) return null;
                    userVulnDB.techDamage = mark;
                    break;
                case "bizDamage":
                    if (userVulnDB.bizDamage != null) return null;
                    userVulnDB.bizDamage = mark;
                    break;
                default:
                    return null;
            }
            if (ifNew)
                crudUserVulnerabilitesDB.Create(userVulnDB);
            else
                crudUserVulnerabilitesDB.Update(userVulnDB);
            if (userVulnDB != null)
                userVulnDB.vulnerability = crudVulnerabilityDB.Read(userVulnDB.vulnerability_id);
            return userVulnDB;
        }
    }
}
